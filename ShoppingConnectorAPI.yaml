openapi: 3.0.0
info: API for GGA Automation for XEH - XCeptor runtime control
description: Commands and queries for controlling XEH - XCeptor runtime
version:  0.1.1
# https://spec.openapis.org/oas/v3.1.0

servers:
  - url: http://api.example.com/v1
    description: Optional server description, e.g. Main (production) server
  - url: http://staging-api.example.com
    description: Optional server description, e.g. Internal staging server for testing

paths:
  /admin/client/list:
    get:

  /admin/client/{client_id}:

  /admin/client/appinstance/list:
    get:
      summary: Lists all the application instances for all clients, handled by this API

  /admin/client/apinnstance/{client_id}:
    get:
      summary: Lists all the application instances for the client  having client_id, handled by this API

  /admin/product-source-type:
    get:
      summary: returns a list of Product Source Types
  
  /admin/product-source-type/{id}:
    get:
      summary: Gets 1 Product Source Type of id {id}
    post:
      summary : Updates the product source type
    delete: 
      summary: Delets the product source type

  /admin/categories/store/list/{feedid}/{instance_id}/{store_id}:
    get:
      summary: Returns a list of categories associated with a store
    responses:
      '200':

      '400':
  
  /admin/categories/publisher/{publisher_id}:
    get:
      summary: Returns a list of categories associated with a publisher (Amazon, Google etc)  
  
    put: 
      summary: Updates the categories associated with the publisher 

  /admin/config/default_category:
    get:
      summary: Returns the configuration category
      responses: 
        '200':

        '400':
    put:
      summary: Sets the google default category for this API installation

  /admin/config/instance/list:
    get:
      summary: 
      responses: 
        '200':

        '400':

  /admin/config/instance/{instanceName}:
    get:
    summary: Re
    responses: 
    '200':

      '400':

  /admin/config/instance/default_category/{instanceName}:
    get:
    summary: Re
    responses: 
    '200':

      '400':

  /admin/ebay/policies:
    get:

  /admin/policy/{policy_name}:
    get:
    put:
      parameter: policyValue
    post:
      parameter: policiValue
    delete:
  /store/list:
    get:
      summary: Returns a list of stores

  /category/list/all:
    get:
      summary: gets alist of all categories from all the strom from one installation
    responses:
      '200':

      '400': 
    
  /category/list/{storeId}:


  /etsy/auth/start/{storeId}:
    /get:
      summary: |
        This is used to produce the required data for startign the Etsy authorization process by the client
        In the first step, the client needs to call etsy for a temporary token. 
        For this, the client needs a challenge code (PKCE), a random state code, an etsy store key
        and a list of etsy scopes. The etsy scopes are allowing access to different sections of the etsy application
        The API will create the state key, the verification code, the correspondent challenge (PKCE format).
        The API will store under the key {stateKey} the verification code, the challenge code (PKCE format), 
        the method used to create the PKCE, the etsy store key and the scopes 
        (the record will also contain placeholders for the auth token, refresh token and token expiration time ) 
        It will return an object of;State Key, Etsy Store Key, PKCE code, PKCE Challenge Method, Etsy temp request url, return Url 
  responses:
    '200':
      description: the parameters and keys needed by the client UI to make the call to etsy for the  temporary token
      content:
        application/json:
          schema:
            type: object
            properties:
              stateCode: #Unique code to track the request 
                type: string
              client_key: #client code identifying a client store with Etsy
                type: string
              challenge: # code PKCE format 
                type: string
              tempTokenUrl: #the url where we go to obtain the temp auth from rtsy
                type: string
              call_back_url: # the url which etsy calls back with the temp authorization



                type: string
              
              
    

  /etsy/auth/request:

  /etsy/auth/token/state/{storeId}/{scopes}:
    /get:
      summary: |
        gets the state of the authorization token for a specific store 
        and the list of scopes specified in the parametrer
      content:
        application/json:

    responses:
      '200':
        description: Returns 

      '400': 